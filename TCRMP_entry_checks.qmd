---
title: "TCRMP Entry Checks"
format: html
editor: visual
author: "Sarah Heidmann"
date: "2025-01-14"
editor_options: 
  chunk_output_type: inline
---

Please note that this page does not update automatically. It is accurate up to the date above.
```{r, warning=FALSE, message=FALSE, echo=FALSE}
library(tidyverse, quietly = TRUE)
library(knitr)
library(DT)

options(knitr.kable.NA = '')

downdate <- "2025-01-14"
dd <- gsub("-","",downdate)

# CH belt list
beltlist <- read_csv("data/beltlist.csv") %>% 
   mutate(ID = paste(`Site name`, Rep, sep = ","),
          ID2 = paste(`Site name`, Rep, Method, sep = ","))

# Boatlogs
logs_raw <- read_csv(paste0("data/data",dd,"/Boatlogs_",downdate,".csv"))
ftlogs <- logs_raw %>%
   filter(`Type name`=="fish transect") %>%
   mutate(ID = paste(`Site name`, Rep, Name, `Date completed`, sep=","))
frlogs <- logs_raw %>%
   filter(`Type name`=="fish rover") %>%
   mutate(ID = paste(`Site name`, Rep, Name, `Date completed`, sep=","))
ahlogs <- logs_raw %>% 
   filter(`Type name`=="algae heights") %>% 
   mutate(ID = paste(`Site name`, Rep, Name, `Date completed`, sep=","))
chlogs <- logs_raw %>% 
   filter(`Type name`=="coral health") %>% 
   mutate(ID = paste(`Site name`, Rep, Name, `Date completed`, sep=",")) 

# Fish transects
fts_raw <- read_csv(paste0("data/data",dd,"/FishTransects_all_",downdate,".csv"),
                    col_types = cols(`Site name` = col_character(),
                                     Proofed = col_logical(),
                                    Name = col_character(),
                                    `Oc cc`= col_character(),
                                    `Common name` = col_character(),
                                    `Scientific name`= col_character(),
                                    `Date completed`=col_date(),
                                     .default=col_double()))
fts <- fts_raw %>%
   select(`Fish transect`, Proofed,`Site name`, Name, `Date completed`, Rep) %>%
   unique() %>%
   mutate(ID = paste(`Site name`, Rep, Name, `Date completed`, sep=","))
# Diademas (for checking against transects)
das_raw <- read_csv(paste0("data/data",dd,"/Diadema_all_",downdate,".csv"),
                    col_types = cols(`Site name` = col_character(),
                                    Name = col_character(),
                                    `Date completed`=col_date(),
                                     .default=col_double()))
das <- das_raw %>%
   select(`Fish transect`, `Site name`, Name, `Date completed`, Rep) %>%
   unique() %>%
   mutate(ID = paste(`Site name`, Rep, Name, `Date completed`, sep=","))

# Fish rovers
frs_raw <- read_csv(paste0("data/data",dd,"/FishRovers_all_",downdate,".csv"),
                    col_types = cols(Proofed = col_logical(),
                                     `Site name`= col_character(),
                                     `Date completed`=col_date(),
                                     Name=col_character(),
                                     Rep=col_double(),
                                     `Oc cc`=col_character(),
                                     Notes=col_character(),
                                     `Common name`=col_character(),
                                     `Scientific name`=col_character(),
                                     `Abundance index`=col_double()))
frs <- frs_raw %>%
   select(`Fish rover`,Proofed,`Site name`, 
          Name, `Date completed`, Rep) %>%
   unique() %>%
   mutate(ID = paste(`Site name`, Rep, Name, `Date completed`, sep=","))


# Algae heights
ahs_raw <- read_csv(paste0("data/data",dd,"/AlgaeHeights_all_",downdate,".csv"))
ahs <- ahs_raw %>%
   mutate(Proofed = as.logical(Proofed), `Date completed` = as.Date(`Date completed`), Rep = as.double(Rep)) %>% 
   select(`Algae height`,Proofed,`Site name`, Name, `Date completed`, Rep) %>%
   unique() %>%
   mutate(ID = paste(`Site name`, Rep, Name, `Date completed`, sep=","))

# Coral healths
chs_raw <- read_csv(paste0("data/data",dd,"/CoralHealth_all_",downdate,".csv"))
chs <- chs_raw %>% 
   mutate(Proofed = as.logical(Proofed), `Date completed` = as.Date(`Date completed`), Rep = as.double(Rep)) %>% 
   select(`Coral health`,Proofed,`Site name`, Name, `Date completed`, Rep, Method) %>% 
   unique() %>% 
   mutate(ID = paste(`Site name`, Rep, Name,  `Date completed`, 
                     # Method,
                     sep=","))

# all together now
done <- fts %>% 
   mutate(`Fish transect`=NULL, `Type name`="fish transect") %>% 
   bind_rows(mutate(frs, `Fish rover`=NULL,`Type name`="fish rover"), 
             mutate(ahs,`Algae height`=NULL,`Type name`="algae height"),
             mutate(chs,`Coral health`=NULL,`Type name`="coral health"))
```

# Entry Progress

### 2024 Annual

```{r, echo=FALSE}
# % done w fieldwork (33 sites excluding GBF * 24 units per site)
donefw <- logs_raw %>% 
   select(`Site name`, `Type name`, Rep) %>% 
   unique()
missedunits <- 4
perdonefw <- round(nrow(donefw) / ((33*24)-missedunits) * 100)
# % done w entry
donelist <- done %>% 
   select(`Site name`, `Type name`, Rep) %>% 
   unique()
perdone <- round(nrow(donelist) / nrow(donefw) * 100)
```

We are `r perdonefw`% done with fieldwork, and `r perdone`% done with entry. This year we missed 1 algae height at CBD, 2 algae heights at SRW, and 1.5 coral healths at SRD.


Here is the number of surveys each person has entered:
```{r, echo = FALSE}
done %>%
   select(Name, `Site name`, `Type name`, Rep) %>%
   group_by(Name, `Type name`) %>%
   summarize(n=length(Rep), .groups="drop") %>%
   pivot_wider(names_from = `Type name`, values_from = n) %>%
   mutate(Total = rowSums(select(.,-Name), na.rm=TRUE)) %>%
   arrange(desc(Total)) %>% kable()
```


## Proofing progress

```{r, echo = FALSE}
# DO NOT proof yet. If you check the box, I will uncheck it for you before requesting proofing and youâ€™ll have to do it again. We want some time separation between entry and proofing to reduce errors.
totenter <- nrow(done)
totproof <- filter(done, Proofed==TRUE) %>% nrow(.)
```
Out of `r totenter` surveys entered, `r totproof` have been proofed (`r round(totproof/totenter*100)`%).
Here is what each person has left to proof:


```{r, echo = FALSE}
done %>% 
   filter(!Proofed) %>% 
   select(Name, `Site name`, `Type name`, Rep) %>% 
   group_by(Name, `Type name`) %>% 
   summarize(n=length(Rep), .groups="drop") %>% 
   pivot_wider(names_from = `Type name`, values_from = n) %>% 
   mutate(Total = rowSums(select(.,-Name), na.rm=TRUE)) %>% 
   arrange(desc(Total)) %>% kable()
```


# Remaining Data Entry

```{r, echo=FALSE}
notran <- ftlogs[!(ftlogs$ID %in% fts$ID),]
norov <- frlogs[!(frlogs$ID %in% frs$ID),]
nohts <- ahlogs[!(ahlogs$ID %in% ahs$ID),]
nochs <- chlogs[!(chlogs$ID %in% chs$ID),]

todo <- notran %>%
   bind_rows(norov, nohts, nochs) %>%
   select(Name, `Site name`, `Date completed`, `Type name`, Rep) %>%
   arrange(Name, `Site name`, `Date completed`, `Type name`, Rep)
```

Here's how many each person has left to enter:

```{r, echo=FALSE}
todo %>% 
   group_by(Name, `Type name`) %>% 
   summarize(n=length(Rep), .groups= "drop") %>% 
   pivot_wider(names_from = `Type name`, values_from = n) %>% 
   mutate(Total = rowSums(select(.,-Name), na.rm = TRUE)) %>% 
   arrange(desc(Total)) %>% kable()
```


## Full Entry To Do List

```{r, echo=FALSE}
todo %>% 
   arrange(`Date completed`) %>% 
   datatable()
```

# QAQC
### Check for mismatched entries

Are there any fish transects that don't match a boatlog entry?

```{r, echo = FALSE}
fterror <- fts %>% 
   filter(!(ID %in% ftlogs$ID))
if(nrow(fterror)>0){
   fterror %>% kable()
} else {
   print("No")
}
```

Are there any fish rovers that don't match a boatlog entry?

```{r, echo = FALSE}
frerror <- frs %>% 
   filter(!(ID %in% frlogs$ID))
if(nrow(frerror)>0){
   frerror %>% kable()
} else {
   print("No")
}
```

Are there any algae heights that don't match a boatlog entry?

```{r, echo = FALSE}
aherror <- ahs %>% 
   filter(!(ID %in% ahlogs$ID))
if(nrow(aherror)>0){
   aherror %>% kable()
} else {
   print("No")
}

```

Are there any coral healths that don't match a boatlog entry?

```{r, echo = FALSE}
cherror <- chs %>% 
   filter(!(ID %in% chlogs$ID))
if(nrow(cherror)>0){
   cherror %>% kable()
} else {
   print("No")
}
```

### Check for duplicates

Are there any duplicated fish transect boatlogs?

```{r, echo=FALSE}
ftlog_dups <- ftlogs[duplicated(ftlogs$ID),]
if(nrow(ftlog_dups)>0){
   ftlog_dups %>% select(-ID) %>% kable()
} else {
   print("No")
}
```

Are there any duplicated fish transect entries?

```{r, echo=FALSE}
ft_dups <- fts[duplicated(fts$ID),]
if(nrow(ft_dups)>0){
   ft_dups %>% select(-ID) %>% kable()
} else {
   print("No")
}
```

Are there any duplicated fish rover boatlogs?

```{r, echo=FALSE}
frlog_dups <- frlogs[duplicated(frlogs$ID),]
if(nrow(frlog_dups)>0){
   frlog_dups %>% select(-ID) %>% kable()
} else {
   print("No")
}
```

Are there any duplicated fish rover entries?

```{r, echo=FALSE}
fr_dups <- frs[duplicated(frs$ID),]
if(nrow(fr_dups)>0){
   fr_dups %>% select(-ID) %>% kable()
} else {
   print("No")
}
```

Coral health and algae height boatlogs are allowed to be duplicated so multiple people can collect and enter data for each transect.

Are there any duplicated coral health entries?

```{r, echo=FALSE}
ch_dups <- chs[duplicated(paste(chs$ID, chs$Method, sep=",")),]
if(nrow(ch_dups)>0){
   ch_dups %>% select(-ID) %>% kable()
} else {
   print("No")
}
```
Are there any duplicated algae height entries?

```{r, echo=FALSE}
ah_dups <- ahs[duplicated(ahs$ID),]
if(nrow(ah_dups)>0){
   ah_dups %>% select(-ID) %>% kable()
} else {
   print("No")
}
```

### Check Diadema
Are any fish transects missing Diadema? This could be an entry mistake, or the diver forgot to size them or forgot to look. The diver should clarify what went wrong.

```{r, echo=FALSE}
diamiss <- fts %>% 
   filter(!(ID %in% das$ID))
if(nrow(diamiss)>0){
   diamiss %>% select(-ID) %>% kable()
} else {
   print("No")
}
```


### Check the belts
Are there any belts where there should not be belts?

**TBS did a belt at SWT 6 to get more coral.**

```{r, echo=FALSE}
belterror <- done %>% 
   filter(Method == "belt") %>% 
   mutate(ID = paste(`Site name`, Rep, sep=",")) %>% 
   filter(!(ID %in% beltlist$ID))
if(nrow(belterror)>0){
   belterror %>% kable()
} else {
   print("No")
}
```

Are there any belt transects that have been entered but do not have both belt and intercept? The ones below are missing.

**TBS forgot to star intercepts at BTY 3, BIT 6, and SVN 2&3.**
```{r, echo=FALSE}
chtodo <- todo %>% 
   filter(`Type name`=="coral health") %>% 
   mutate(ID = paste(`Site name`, Rep, sep = ","))
donebelts <- done %>% 
   filter(`Type name`=="coral health") %>% 
   mutate(ID2 = paste(`Site name`,Rep, Method, sep=",")) %>% 
   filter(ID2 %in% beltlist$ID2)
beltmiss <- beltlist %>% # only worry about it if:
   filter(ID %in% with(chlogs, paste(`Site name`, Rep, sep=",")) & # it has a boatlog and
      !(ID %in% chtodo$ID) & # it has been entered and
             !(ID2 %in% donebelts$ID2)) # it does not have both belt and intercept
if(nrow(beltmiss)>0){
   beltmiss %>% kable()
} else {
   print("No")
}
```

